import hashlib
import os

# 사용자, 글, 댓글, 좋아요, 조회수 정보를 저장할 파일 경로
USER_FILE = "users.txt"
POSTS_FILE = "posts.txt"
COMMENTS_FILE = "comments.txt"
LIKE_FILE = "likes.txt"
VIEWS_FILE = "views.txt"
IMAGE_DIRECTORY = "images"


def register(username, password, role="user"):
    # 사용자 정보를 해싱하여 저장
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    with open(USER_FILE, "a") as f:
        f.write(f"{username}:{hashed_password}:{role}\n")
    print("회원가입이 완료되었습니다.")


def login(username, password):
    # 저장된 사용자 정보를 불러옴
    with open(USER_FILE, "r") as f:
        users = f.readlines()

    # 입력된 사용자 정보를 해싱하여 검증
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    for user in users:
        stored_username, stored_password, role = user.strip().split(":")
        if username == stored_username and hashed_password == stored_password:
            print("로그인 성공!")
            return role
    print("아이디 또는 비밀번호가 올바르지 않습니다.")
    return None


def create_post(username, content, image_path=None, is_secret=False, password=None):
    if is_secret:
        password = input("비밀번호를 입력하세요: ")

    # 이미지를 업로드하고 경로를 저장
    if image_path:
        image_filename = os.path.basename(image_path)
        image_extension = os.path.splitext(image_filename)[1]
        new_image_path = os.path.join(IMAGE_DIRECTORY, image_filename)
        os.makedirs(IMAGE_DIRECTORY, exist_ok=True)
        os.rename(image_path, new_image_path)
        content += f"\n[Image: {new_image_path}]"

    with open(POSTS_FILE, "a") as f:
        f.write(f"{username}:{content}:{is_secret}:{password}\n")
    print("게시글이 작성되었습니다.")


def view_post(role):
    with open(POSTS_FILE, "r") as f:
        posts = f.readlines()

    # 최신순으로 정렬
    posts.sort(reverse=True)

    post_index = int(input("조회할 게시글 번호를 입력하세요: ")) - 1
    stored_username, content, is_secret, password = posts[post_index].strip().split(":")
    like_count = count_likes("post", post_index)
    if is_secret == "True" and role != "admin":
        input_password = input("비밀번호를 입력하세요: ")
        if input_password == password:
            print(f"{stored_username}: {content} (좋아요: {like_count})")
        else:
            print("비밀번호가 올바르지 않습니다.")
    else:
        print(f"{stored_username}: {content} (좋아요: {like_count})")
        if input("이 게시글에 좋아요를 누르시겠습니까? (y/n): ").lower() == "y":
            if not check_like(role, post_index):
                add_like(role, post_index)
            else:
                print("이미 좋아요를 누르셨습니다.")


def view_post_by_views():
    with open(POSTS_FILE, "r") as f:
        posts = f.readlines()

    # 조회수를 기준으로 정렬
    posts.sort(key=lambda x: count_views(x), reverse=True)

    for post in posts:
        stored_username, content, is_secret, password = post.strip().split(":")
        like_count = count_likes("post", posts.index(post))
        if is_secret == "True" and role != "admin":
            input_password = input("비밀번호를 입력하세요: ")
            if input_password == password:
                print(f"{stored_username}: {content} (좋아요: {like_count})")
                add_views(posts.index(post))  # 조회수 증가
            else:
                print("비밀번호가 올바르지 않습니다.")
        else:
            print(f"{stored_username}: {content} (좋아요: {like_count})")
            add_views(posts.index(post))  # 조회수 증가
            if input("이 게시글에 좋아요를 누르시겠습니까? (y/n): ").lower() == "y":
                if not check_like(role, posts.index(post)):
                    add_like(role, posts.index(post))
                else:
                    print("이미 좋아요를 누르셨습니다.")


def create_comment(username, post_index, content):
    with open(COMMENTS_FILE, "a") as f:
        f.write(f"{username}:{post_index}:{content}\n")
    print("댓글이 작성되었습니다.")


def view_comments(post_index):
    with open(COMMENTS_FILE, "r") as f:
        comments = f.readlines()
    for comment in comments:
        stored_post_index, content = comment.strip().split(":")[1:]
        if int(stored_post_index) == post_index:
            like_count = count_likes("comment", comments.index(comment))
            print(content + f" (좋아요: {like_count})")


def add_like(username, index, is_comment=False):
    with open(LIKE_FILE, "a") as f:
        f.write(f"{username}:{index}:{'comment' if is_comment else 'post'}\n")
    print("좋아요를 눌렀습니다.")


def check_like(username, index, is_comment=False):
    with open(LIKE_FILE, "r") as f:
        likes = f.readlines()
    for like in likes:
        stored_username, stored_index, like_type = like.strip().split(":")
        if username == stored_username and int(index) == int(stored_index) and like_type.strip() == (
        'comment' if is_comment else 'post'):
            return True
    return False


def count_likes(type, index):
    count = 0
    with open(LIKE_FILE, "r") as f:
        likes = f.readlines()
    for like in likes:
        stored_index, like_type = like.strip().split(":")[1:]
        if type == "post" and like_type.strip() == "post" and int(index) == int(stored_index):
            count += 1
        elif type == "comment" and like_type.strip() == "comment" and int(index) == int(stored_index):
            count += 1
    return count


def add_views(post_index):
    with open(VIEWS_FILE, "a") as f:
        f.write(f"{post_index}\n")


def count_views(post):
    post_index = post.strip().split(":")[1:]
    count = 0
    with open(VIEWS_FILE, "r") as f:
        views = f.readlines()
    for view in views:
        if view.strip() == post_index[0]:
            count += 1
    return count


def update_profile(username):
    password = input("기존 비밀번호를 입력하세요: ")
    role = login(username, password)
    if role:
        new_password = input("새로운 비밀번호를 입력하세요: ")
        confirm_password = input("새로운 비밀번호를 다시 입력하세요: ")
        if new_password == confirm_password:
            hashed_password = hashlib.sha256(new_password.encode()).hexdigest()
            with open(USER_FILE, "r+") as f:
                lines = f.readlines()
                f.seek(0)
                for line in lines:
                    stored_username, stored_password, stored_role = line.strip().split(":")
                    if stored_username == username:
                        line = f"{stored_username}:{hashed_password}:{stored_role}\n"
                    f.write(line)
                f.truncate()
            print("비밀번호가 업데이트되었습니다.")

            # 프로필 이미지 추가
            profile_image_path = input("프로필 이미지의 파일 경로를 입력하세요: ")
            if os.path.exists(profile_image_path):
                new_image_filename = f"{username}_profile_image.jpg"  # 이미지 파일 이름을 사용자 이름으로 설정
                new_image_path = os.path.join(IMAGE_DIRECTORY, new_image_filename)
                os.makedirs(IMAGE_DIRECTORY, exist_ok=True)
                os.rename(profile_image_path, new_image_path)
                print("프로필 이미지가 업데이트되었습니다.")
            else:
                print("입력한 파일 경로가 잘못되었습니다.")
        else:
            print("새로운 비밀번호가 일치하지 않습니다.")
    else:
        print("비밀번호가 올바르지 않습니다.")


def main():
    while True:
        print("1. 회원가입")
        print("2. 로그인")
        print("3. 게시글 작성")
        print("4. 게시글 보기 (최신순)")
        print("5. 게시글 보기 (조회수 많은 순)")
        print("6. 댓글 작성")
        print("7. 프로필 수정")
        print("8. 종료")

        choice = input("선택하세요: ")

        if choice == "1":
            username = input("사용자 이름을 입력하세요: ")
            password = input("비밀번호를 입력하세요: ")
            role = input("권한을 입력하세요 (admin 또는 user): ")
            if role == "admin":
                register(username, password, role="admin")
            else:
                register(username, password)
        elif choice == "2":
            username = input("사용자 이름을 입력하세요: ")
            password = input("비밀번호를 입력하세요: ")
            role = login(username, password)
            if role == "admin":
                print("관리자로 로그인하였습니다.")
            elif role == "user":
                print("일반 사용자로 로그인하였습니다.")
            else:
                print("로그인 실패")
        elif choice == "3":
            if role:
                content = input("게시글 내용을 입력하세요: ")
                image_path = input("이미지 경로를 입력하세요 (없을 경우 빈 칸): ")
                is_secret = input("비밀글 여부를 선택하세요 (y/n): ")
                if is_secret.lower() == "y":
                    create_post(username, content, image_path, is_secret=True)
                else:
                    create_post(username, content, image_path)
            else:
                print("로그인이 필요합니다.")
        elif choice == "4":
            if role:
                view_post(role)
            else:
                print("로그인이 필요합니다.")
        elif choice == "5":
            if role:
                view_post_by_views()
            else:
                print("로그인이 필요합니다.")
        elif choice == "6":
            if role:
                post_index = int(input("댓글을 작성할 게시글 번호를 입력하세요: ")) - 1
                content = input("댓글 내용을 입력하세요: ")
                create_comment(username, post_index, content)
            else:
                print("로그인이 필요합니다.")
        elif choice == "7":
            if role:
                update_profile(username)
            else:
                print("로그인이 필요합니다.")
        elif choice == "8":
            print("프로그램을 종료합니다.")
            break
        else:
            print("잘못된 선택입니다.")


if __name__ == "__main__":
    main()
